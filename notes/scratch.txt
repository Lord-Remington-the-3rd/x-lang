
expressions:
 2*(2+2)
 2<<2 + 3 - 5
 2+2 != 3+3
 2*2 + 3*2  !=  2 + 5
 var += 2<<3*2
 var + -@a + $b
 var += 2 << 3
 flags |= 1 << 31

declarations:

 int a
 int a = 3
 int* a            pointer to int
 int*[] a          array to pointer to int
 int[]* a          pointer to array to int
 int<-(int, int)   function taking pair of ints returning an int

 int#              const int
 int*#             const pointer to int
 int#*             pointer to const int
 int*[]#           const array to pointer int

note: read strictly right to left
note: no brackets required

 type int# cint    typedef const int as `cint`
 type int* pint    typedef pointer to int as `pint`

note: appending type to a declaration makes it a type declaration
note: the declared type will be distinct
      to make a non-distinct type declaration use `alias` instead.

 type enum {
   RED=0; GREEN=1+0*123; BLUE;
 } traffic_light_color;

 struct { 
  int; 
  int;
 } a;              struct with two fields
 a.0               access to 0-th field.
 
 alias union {
   struct {int x,y;};
   
 }

 vec2 a;
 a[1] = 2;

 enum {
   A, B, C = 3, D = 1,
 } b;

 // functions
 int<-(int a) function return a+3;
 int b = function(2);


