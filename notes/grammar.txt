
Operators symbols:
!  @  #  $  %  ^  &  *  +  -  =  |  /  ?  .

Operators
Op   Name         Type       Assoc.    Usage

:    ?            ?          ?         ?
#    const        unary      none      types
@    dereference  unary      right     ptrs
$    address      unary      right     var
^    bxor         binary     left      integers
&    band         binary     left      integers
|    bor          binary     left      integers
*    mul          binary     left      numbers
+    add          binary     left      numbers
+    nop          unary      right     numbers
-    sub          binary     left      numbers
-    neg          unary      right     numbers
/    div          binary     left      integers/numbers
%    mod          binary     left      integers
=    assign       binary     none      value to var
.    access       binary     left      field of struct
^=   xor-assign   binary     none      integer to var
&=   and-assign   binary     none      integer to var
|=   or-assign    binary     none      integer to var
*=   mul-assign   binary     none      integer to var
+=   add-assign   binary     none      integer to var
-=   sub-assign   binary     none      integer to var
/=   div-assign   binary     none      integer to var
%=   mod-assign   binary     none      integer to var
==   cmp-equal    binary     none      values
!=   cmp-neq      binary     none      values
>    cmp-greater  binary     none      ordered values
>=   cmp-geq      binary     none      ordered values
<    cmp-less     binary     none      ordered values
<=   cmp-leq      binary     none      ordered values
!    not          unary      right     bools
?    ?            ?          ?         ?
->   left-arrow   binary     ?         ?
<-   right-arrow  binary     ?         function declarator
>>   r-l-shift    binary     left      integers
<<   l-l-shift    binary     left      integers
>>>  r-a-shift    binary     left      integers
<<<  l-a-shift    binary     left      integers
>>=  r-l-shift-a  binary     none      integers to var
<<=  l-l-shift-a  binary     none      integers to var
>>>= r-a-shift-a  binary     none      integers to var
<<<= l-a-shift-a  binary     none      integers to var
xor  xor          binary     left      bools
and  and          binary     left      bools
or   or           binary     left      bools

Precedence level:
Level 1: unr-op =   - + $ !
Level 2: mul-op =   * / % & ^ >> << >>> <<<
Level 3: add-op =   + - | 
Level 4: cmp-op =   < > <= >= == !=
Level 5:            and
Level 6:            or
Level 7: ass-op =   = *= += /= -= >>= <<= >>>= <<<= &= ^= |=
